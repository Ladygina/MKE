# -*- coding: utf-8 -*-
"""lab5_MKE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvD-XOX5dNERFysLLWVsCN-vbx2VNx3P
"""

import numpy as np
import math

def det(x,y):
  delta=(x[1]*y[2]-y[1]*x[2])+(x[2]*y[0]-x[0]*y[2])+(x[0]*y[1]-x[1]*y[0])
  return delta

def a(x,y):
  A=[]
  A.append(x[1]*y[2]-x[2]*y[1])
  A.append(x[2]*y[0]-x[0]*y[2])
  A.append(x[0]*y[1]-x[1]*y[0])
  return A

def b(x,y):
  B=[]
  B.append(y[1]-y[2])
  B.append(y[2]-y[0])
  B.append(y[0]-y[1])
  return B

def c(x,y):
  C=[]
  C.append(x[2]-x[1])
  C.append(x[0]-x[2])
  C.append(x[1]-x[0])
  return C

def B(b,c, delta):
  B=[[0 for i in range(3)]for j in range(2)]
  B[0][0]=float(1)/delta*b[0]
  B[0][1]=float(1)/delta*b[1]
  B[0][2]=float(1)/delta*b[2]

  B[1][0]=float(1)/delta*c[0]
  B[1][1]=float(1)/delta*c[1]
  B[1][2]=float(1)/delta*c[2]

  return B

t=2
S=4.5

F=20
mu=0.25
E=6000000

D=[[0 for i in range(3)]for j in range(3)]

D[0][0]=float(E)/(1-mu**2)
D[0][1]=float(E)/(1-mu**2)*mu
D[1][0]=D[0][1]
D[1][1]=D[0][0]
D[2][2]=float(E)/(2*(1-mu**2))*(1-mu)

for i in range(3):
  for j in range(3):
    print(D[i][j], end=' ')
  print("\n")

#1
x=[0,3,0]
y=[0,0,3]
A1=a(x,y)
B1=b(x,y)
C1=c(x,y)

for i in range(3):
  print("N",i+1,"= ", float(1)/(2*S)*A1[i], "+", float(1)/(2*S)*B1[i], "x +", float(1)/(2*S)*C1[i], "y\n")

print("\n\n")

B=[[0 for i in range(6)]for j in range(3)]

B[0][0]=float(1)/(2*S)*B1[0]
B[0][2]=float(1)/(2*S)*B1[1]
B[0][4]=float(1)/(2*S)*B1[2]

B[1][1]=float(1)/(2*S)*C1[0]
B[1][3]=float(1)/(2*S)*C1[1]
B[1][5]=float(1)/(2*S)*C1[2]

B[2][0]=float(1)/(2*S)*C1[0]
B[2][1]=float(1)/(2*S)*B1[0]
B[2][2]=float(1)/(2*S)*C1[1]
B[2][3]=float(1)/(2*S)*B1[1]
B[2][4]=float(1)/(2*S)*C1[2]
B[2][5]=float(1)/(2*S)*B1[2]


print("B\n")
for i in range(3):
  for j in range(6):
    print(round(B[i][j],2), end=' ')
  print("\n")

K1=t*S*np.dot(np.transpose(B),np.dot(D,B))
print("\n\nK:")
for i in range(6):
  for j in range(6):
    print(round(K1[i][j],7), end=' ')
  print("\n")


f=[0,0,0,0,0,0]

print(np.linalg.det(K1))
#K_inv=np.linalg.inv(K)
#U=np.dot(K_inv,f)
#print(U)

#II

x=[0,3,3]
y=[3,0,3]
A1=a(x,y)
B1=b(x,y)
C1=c(x,y)

for i in range(3):
  print("N",i+1,"= ", float(1)/(2*S)*A1[i], "+", float(1)/(2*S)*B1[i], "x +", float(1)/(2*S)*C1[i], "y\n")

print("\n\n")

B=[[0 for i in range(6)]for j in range(3)]

B[0][0]=float(1)/(2*S)*B1[0]
B[0][2]=float(1)/(2*S)*B1[1]
B[0][4]=float(1)/(2*S)*B1[2]

B[1][1]=float(1)/(2*S)*C1[0]
B[1][3]=float(1)/(2*S)*C1[1]
B[1][5]=float(1)/(2*S)*C1[2]

B[2][0]=float(1)/(2*S)*C1[0]
B[2][1]=float(1)/(2*S)*B1[0]
B[2][2]=float(1)/(2*S)*C1[1]
B[2][3]=float(1)/(2*S)*B1[1]
B[2][4]=float(1)/(2*S)*C1[2]
B[2][5]=float(1)/(2*S)*B1[2]


print("B\n")
for i in range(3):
  for j in range(6):
    print(round(B[i][j],2), end=' ')
  print("\n")

K2=t*S*np.dot(np.transpose(B),np.dot(D,B))
print("\n\nK2:")
for i in range(6):
  for j in range(6):
    print(round(K2[i][j],7), end=' ')
  print("\n")

#III

x=[3,3,6]
y=[3,0,0]
A1=a(x,y)
B1=b(x,y)
C1=c(x,y)

for i in range(3):
  print("N",i+1,"= ", float(1)/(2*S)*A1[i], "+", float(1)/(2*S)*B1[i], "x +", float(1)/(2*S)*C1[i], "y\n")

print("\n\n")

B=[[0 for i in range(6)]for j in range(3)]

B[0][0]=float(1)/(2*S)*B1[0]
B[0][2]=float(1)/(2*S)*B1[1]
B[0][4]=float(1)/(2*S)*B1[2]

B[1][1]=float(1)/(2*S)*C1[0]
B[1][3]=float(1)/(2*S)*C1[1]
B[1][5]=float(1)/(2*S)*C1[2]

B[2][0]=float(1)/(2*S)*C1[0]
B[2][1]=float(1)/(2*S)*B1[0]
B[2][2]=float(1)/(2*S)*C1[1]
B[2][3]=float(1)/(2*S)*B1[1]
B[2][4]=float(1)/(2*S)*C1[2]
B[2][5]=float(1)/(2*S)*B1[2]


print("B\n")
for i in range(3):
  for j in range(6):
    print(round(B[i][j],2), end=' ')
  print("\n")

K3=t*S*np.dot(np.transpose(B),np.dot(D,B))
print("\n\nK3:")
for i in range(6):
  for j in range(6):
    print(round(K3[i][j],7), end=' ')
  print("\n")

#IV

x=[6,6,3]
y=[0,3,3]
A1=a(x,y)
B1=b(x,y)
C1=c(x,y)

for i in range(3):
  print("N",i+1,"= ", float(1)/(2*S)*A1[i], "+", float(1)/(2*S)*B1[i], "x +", float(1)/(2*S)*C1[i], "y\n")

print("\n\n")

B=[[0 for i in range(6)]for j in range(3)]

B[0][0]=float(1)/(2*S)*B1[0]
B[0][2]=float(1)/(2*S)*B1[1]
B[0][4]=float(1)/(2*S)*B1[2]

B[1][1]=float(1)/(2*S)*C1[0]
B[1][3]=float(1)/(2*S)*C1[1]
B[1][5]=float(1)/(2*S)*C1[2]

B[2][0]=float(1)/(2*S)*C1[0]
B[2][1]=float(1)/(2*S)*B1[0]
B[2][2]=float(1)/(2*S)*C1[1]
B[2][3]=float(1)/(2*S)*B1[1]
B[2][4]=float(1)/(2*S)*C1[2]
B[2][5]=float(1)/(2*S)*B1[2]


print("B\n")
for i in range(3):
  for j in range(6):
    print(round(B[i][j],2), end=' ')
  print("\n")

K4=t*S*np.dot(np.transpose(B),np.dot(D,B))
print("\n\nK4:")
for i in range(6):
  for j in range(6):
    print(round(K4[i][j],7), end=' ')
  print("\n")

index_I=[0,1,2]
index_II=[2,1,3]
index_III=[3,1,4]
index_IV=[4,5,3]

K=[[0 for i in range(12)]for j in range(12)]

for i in range(0,6):
  for j in range(0,6):
    for k in range(3):
      for t in range(3):

        if i==index_I[k] and j==index_I[t]:
          if (i==j):
            if (i%2==0):
             K[2*i][2*j]+=K1[2*k][2*t]
            else:
             K[2*i+1][2*j+1]+=K1[2*k+1][2*t+1]
          else:
            K[2*i][2*j]+=K1[2*k][2*t]
          K[2*i+1][2*j]+=K1[2*k+1][2*t]
          K[2*i+1][2*j+1]+=K1[2*k+1][2*t+1]
          K[2*j][2*i+1]=K[2*i+1][2*j]

        if i==index_II[k] and j==index_II[t]:
           if (i==j):
            if (i%2==0):
             K[2*i][2*j]+=K2[2*k][2*t]
            else:
             K[2*i+1][2*j+1]+=K2[2*k+1][2*t+1]
           else:
            K[2*i][2*j]+=K2[2*k][2*t]
           K[2*i+1][2*j]+=K2[2*k+1][2*t]
           K[2*i+1][2*j+1]+=K2[2*k+1][2*t+1]
           K[2*j][2*i+1]=K[2*i+1][2*j]

        if i==index_III[k] and j==index_III[t]:
          if (i==j):
            if (i%2==0):
             K[2*i][2*j]+=K3[2*k][2*t]
            else:
             K[2*i+1][2*j+1]+=K3[2*k+1][2*t+1]
          else:
            K[2*i][2*j]+=K3[2*k][2*t]
          K[2*i+1][2*j]+=K3[2*k+1][2*t]
          K[2*i+1][2*j+1]+=K3[2*k+1][2*t+1]

          K[2*j][2*i+1]=K[2*i+1][2*j]




        if i==index_IV[k] and j==index_IV[t]:
         if (i==j):
            if (i%2==0):
             K[2*i][2*j]+=K4[2*k][2*t]
            else:
             K[2*i+1][2*j+1]+=K4[2*k+1][2*t+1]
         else:
            K[2*i][2*j]+=K4[2*k][2*t]
        K[2*i+1][2*j]+=K4[2*k+1][2*t]
        K[2*i+1][2*j+1]+=K4[2*k+1][2*t+1]

        K[2*j][2*i+1]=K[2*i+1][2*j]

for i in range(12):
  for j in range(12):
    print(round(K[i][j],7), end=' ')
  print("\n")

#print(np.linalg.det(K))
F=[0,0,0,0,0,0,0,0,60000000,0,60000000,0]

#K1=
np.dot(np.linalg.inv(K), F)

K=[[0 for i in range(12)]for j in range(12)]
K[0][0]=1

K[1][1]=1



K[2][2]=6.4+2.4+8.8
K[2][3]=4
K[2][4]=0
K[2][5]=4
K[2][6]=-4.8
K[2][7]=-4
K[2][8]=-6.4
K[2][9]=-2.4


K[3][3]= 6.4+2.4+8.8
K[3][4]=4

K[3][6]=-4
K[3][7]=-12.8
K[3][8]= -1.6
K[3][9]= -2.4

K[4][4]=1
#K[4][6]=-6.4
#K[4][7]=-1.6

K[5][5]= 1




K[6][6]= 6.4+2.4+8.8
K[6][7]= 4
K[6][9]= 4
K[6][10]=-6.4
K[6][11]=-1.6


K[7][7]= 6.4+2.4+8.8
K[7][8]= 4
K[7][10]=-2.4
K[7][11]= -2.4


K[8][8]=8.8
K[8][10]=-2.4
K[8][11]= -2.4



K[9][9]=8.8
K[9][10]=-1.6
K[9][11]= -6.4


K[10][10]= 8.8
K[10][11]= 4



K[11][11]= 8.8

for i in range(12):
  for j in range(12):
    K[j][i]=K[i][j]
    K[4][j]=0
    K[4][4]=1
    K[5][j]=0
    K[5][5]=1
    K[1][j]=0
    K[1][1]=1
    K[i][j]*=1000000

    print(K[i][j], end=' ')
  print("\n")