# -*- coding: utf-8 -*-
"""lab4_MKE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b_YoQrXMXiS_ymOrOJoiDX72TqAAXWoT
"""

import numpy as np
import math

def N(x,y):
  delta=0
  a=[]
  b=[]
  c=[]

def det(x,y):
  delta=(x[1]*y[2]-y[1]*x[2])+(x[2]*y[0]-x[0]*y[2])+(x[0]*y[1]-x[1]*y[0])
  return delta

def a(x,y):
  A=[]
  A.append(x[1]*y[2]-x[2]*y[1])
  A.append(x[2]*y[0]-x[0]*y[2])
  A.append(x[0]*y[1]-x[1]*y[0])
  return A

def b(x,y):
  B=[]
  B.append(y[1]-y[2])
  B.append(y[2]-y[0])
  B.append(y[0]-y[1])
  return B

def c(x,y):
  C=[]
  C.append(x[2]-x[1])
  C.append(x[0]-x[2])
  C.append(x[1]-x[0])
  return C



def B(b,c, delta):
  B=[[0 for i in range(3)]for j in range(2)]
  B[0][0]=float(1)/delta*b[0]
  B[0][1]=float(1)/delta*b[1]
  B[0][2]=float(1)/delta*b[2]

  B[1][0]=float(1)/delta*c[0]
  B[1][1]=float(1)/delta*c[1]
  B[1][2]=float(1)/delta*c[2]

  return B

D=[[0 for i in range(2)]for j in range(2)]
D[0][0]=lambd
D[1][1]=lambd
for i in range(2):
  for j in range(2):
    print(D[i][j], end=' ')
  print("\n")

lambd=75
q=150
alpha_g=10
T_g=40

#I тело

x=[0,2,0]
y=[0,0,2]

A1=a(x,y)
B1=b(x,y)
C1=c(x,y)
det1=det(x,y)

print("det=", det1)
print("a=", A1)
print("b=",B1)
print("c=", C1)
print("N= [", A1, "+", B1, "*x+", C1, "*y ]")

print("\n", "Matrix B:\n")
B0=B(B1,C1,det1)
for i in range(2):
  for j in range(3):
    print(B0[i][j], end=' ')
  print("\n")


print("\n", "Matrix B_T:\n")
B0_T=np.transpose(B0)
for i in range(3):
  for j in range(2):
    print(B0_T[i][j], end=' ')
  print("\n")


print("K Matrix:\n")
K=2*np.dot(B0_T, np.dot(D,B0))
for i in range(3):
  for j in range(3):
    print(K[i][j], end=' ')
  print("\n")

F=[q*1,0, q*1]
print("F=", F)

#II тело

x=[0,2,2]
y=[2,0,2]

A1=a(x,y)
B1=b(x,y)
C1=c(x,y)
det1=det(x,y)

print("det=", det1)
print("a=", A1)
print("b=",B1)
print("c=", C1)

print("\n\nN= [", float(A1[0])/4, "+", float(B1[0])/4, "*x+", float(C1[0])/4, "*y\n",float(A1[1])/4, "+", float(B1[1])/4, "*x+", float(C1[1])/4, "*y\n",float(A1[2])/4, "+", float(B1[2])/4, "*x+", float(C1[2])/4, "*y ]")

print("\n", "Matrix B:\n")
B0=B(B1,C1,det1)
for i in range(2):
  for j in range(3):
    print(B0[i][j], end=' ')
  print("\n")

K_h=[[0 for i in range (3)]for j in range(3)]
K_h[0][0]=alpha_g*round(float(2)/3,4)
K_h[0][2]=alpha_g*round(float(1)/3,4)
K_h[2][0]=alpha_g*round(float(1)/3,4)
K_h[2][2]=alpha_g*round(float(2)/3,4)
print("\n", "Matrix B_T:\n")
B0_T=np.transpose(B0)
for i in range(3):
  for j in range(2):
    print(B0_T[i][j], end=' ')
  print("\n")


print("K Matrix:\n")
K=2*np.dot(B0_T, np.dot(D,B0))
K=K+K_h
for i in range(3):
  for j in range(3):
    print(K[i][j], end=' ')
  print("\n")

F=[400,0, 400]
#print(F)

#III тело

x=[2,2,4]
y=[2,0,0]

A1=a(x,y)
B1=b(x,y)
C1=c(x,y)
det1=det(x,y)

print("det=", det1)
print("a=", A1)
print("b=",B1)
print("c=", C1)
print("\n\nN= [", float(A1[0])/4, "+", float(B1[0])/4, "*x+", float(C1[0])/4, "*y\n",float(A1[1])/4, "+", float(B1[1])/4, "*x+", float(C1[1])/4, "*y\n",float(A1[2])/4, "+", float(B1[2])/4, "*x+", float(C1[2])/4, "*y ]")
print("\n", "Matrix B:\n")
B0=B(B1,C1,det1)
for i in range(2):
  for j in range(3):
    print(B0[i][j], end=' ')
  print("\n")


print("\n", "Matrix B_T:\n")
B0_T=np.transpose(B0)
for i in range(3):
  for j in range(2):
    print(B0_T[i][j], end=' ')
  print("\n")


print("K Matrix:\n")
K=2*np.dot(B0_T, np.dot(D,B0))
for i in range(3):
  for j in range(3):
    print(K[i][j], end=' ')
  print("\n")

F=[0,0, 0]
#print(F)

#IV тело

x=[4,4,2]
y=[0,2,2]

A1=a(x,y)
B1=b(x,y)
C1=c(x,y)
det1=det(x,y)

print("det=", det1)
print("a=", A1)
print("b=",B1)
print("c=", C1)
print("\n\nN= [", float(A1[0])/4, "+", float(B1[0])/4, "*x+", float(C1[0])/4, "*y\n",float(A1[1])/4, "+", float(B1[1])/4, "*x+", float(C1[1])/4, "*y\n",float(A1[2])/4, "+", float(B1[2])/4, "*x+", float(C1[2])/4, "*y ]")
print("\n", "Matrix B:\n")
B0=B(B1,C1,det1)
for i in range(2):
  for j in range(3):
    print(B0[i][j], end=' ')
  print("\n")


print("\n", "Matrix B_T:\n")
B0_T=np.transpose(B0)
for i in range(3):
  for j in range(2):
    print(B0_T[i][j], end=' ')
  print("\n")

K_h1=[[0 for i in range (3)]for j in range(3)]
K_h1[0][0]=alpha_g*round(float(2)/3,3)
K_h1[0][1]=alpha_g*round(float(1)/3,3)
K_h1[1][0]=alpha_g*round(float(1)/3,3)
K_h1[1][1]=alpha_g*round(float(2)/3,3)

K_h2=[[0 for i in range (3)]for j in range(3)]
K_h2[1][1]=alpha_g*round(float(2)/3,3)
K_h2[1][2]=alpha_g*round(float(1)/3,3)
K_h2[2][1]=alpha_g*round(float(1)/3,3)
K_h2[2][2]=alpha_g*round(float(2)/3,3)

print("K Matrix:\n")
K=2*np.dot(B0_T, np.dot(D,B0))
for i in range(3):
  for j in range(3):
    print(K[i][j], end=' ')
  print("\n")

K=K+K_h1+K_h2
for i in range(3):
  for j in range(3):
    print(K[i][j], end=' ')
  print("\n")

#F=500*[0,1,1]+500*[1,1,0]
F=[-1200,400,2400]
print(F)

def x32(x):
  return  -float(x**3)/12+3*float(x**2)/4-2*x

def x33(x):
  return  4*x-x**2+float(x**3)/12

print(x22(4)-x22(2))
print(x32(4)-x32(2))
print(x33(4)-x33(2))

F=[150,0,400,500,250,500]


K=[[0 for i in range(6)]for j in range(6)]
K[0][0]=75
K[0][1]=-37.5
K[0][2]=-37.5

K[1][0]=K[0][1]
K[1][1]=37.5+37.5+75
K[1][3]=-37.5
K[1][4]=-37.5

K[2][0]=K[0][2]
K[2][2]=37.5+44.17
K[2][3]=-34.17

K[3][1]=K[1][3]
K[3][2]=K[2][3]
K[3][3]=81.67+37.5+44.17
K[3][5]=-34.17

K[4][1]=K[1][4]
K[4][4]=37.5+44.17
K[4][5]=-34.17

K[5][3]=-34.17
K[5][4]=K[4][5]
K[5][5]=88.34

for i in range(6):
  for j in range(6):
    print(K[i][j], end=' ')
  print("\n")


K_inv=np.linalg.inv(K)

T=np.dot(K_inv, F)
print(T)