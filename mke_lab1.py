# -*- coding: utf-8 -*-
"""MKE_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKZqd3a9nn5jx9_8-wTReg8REP8vkvHF
"""

from scipy.stats import binom
from scipy.stats import beta
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
import math
import seaborn as sns

alpha=10
q=150
l=75
T_g=25
B=2
b=4
A=6


h1=float(alpha*B)/2
h2=float(alpha*B)/2
h3=float(alpha*A)/6
h4=float(alpha*A)/6
h5=float(alpha*b)/4
h6=float(alpha*b)/2
h7=float(alpha*b)/4



k1=float(l*A)/(6*B)
k2=float(l*B*3)/(2*A)
k3=k2
k4=k2
k5=k2
k6=k2
k7=k2
k8=k1
k9=k1
k10=k1
k11=float(l*A*4)/(6*b)
k12=k11
k13=float(l*b*6)/(4*A)
k14=k11
k15=k3
k16=k13




K=[[0 for i in range(12)] for j in range(12)]
Q=[]
for i in range(12):
  Q.append(0)

K[0][0]=h1+k1+k2
K[0][1]=-k1
K[0][2]=-k2
#Q[0]=Q1+h1*T1

K[1][0]=-k1
K[1][1]=h2+k1+k5+h3
K[1][3]=-k5


K[2][0]=-k2
K[2][2]=k2+k8+k3
K[2][3]=-k8
K[2][4]=-k3

K[3][1]=-k5
K[3][2]=-k8
K[3][3]=k5+k6+k8+k11+h4+h5
K[3][5]=-k6
K[3][8]=-k11

K[4][2]=-k3
K[4][4]=k3+k4+k9
K[4][5]=-k9
K[4][6]=-k4

K[5][3]=-k6
K[5][4]=-k9
K[5][5]=k6+k9+k7+k13
K[5][7]=-k7
K[5][9]=-k13

K[6][4]=-k4
K[6][6]=k4+k10
K[6][7]=-k10

K[7][5]=-k7
K[7][6]=-k10
K[7][7]=k7+k10

K[8][3]=-k11
K[8][8]=h6+k11+k12+k15
K[8][9]=-k15
K[8][10]=-k12

K[9][5]=-k13
K[9][8]=-k15
K[9][9]=k13+k14+k15
K[9][11]=-k14

K[10][8]=-k12
K[10][10]=k16+h7+k12
K[10][11]=-k16

K[11][9]=-k14
K[11][10]=-k16
K[11][11]=k14+k16

print("[")
for i in range(12):
  for j in range(12):
    print(K[i][j], end=", ")
  print("],\n")

Q1=q*float(A)/6
Q2=q*float(A)/3
Q3=q*float(A)/3
Q4=q*float(A)/3
Q5=q*float(B)/2
Q6=q*float(B)/2
Q7=q*float(b)/4
Q8=q*float(b)/2
Q9=q*float(b)/4
#print(Q1,"\n", Q2, "\n", Q3, "\n", Q4, "\n", Q5, "\n", Q7, "\n", Q8)


Q[0]=Q1+h1*T_g
Q[1]=h3*T_g+h2*T_g
Q[2]=Q2
Q[3]=h4*T_g+h5*T_g
Q[4]=Q3
Q[5]=Q7
Q[6]=Q4+Q6
Q[7]=Q5
Q[8]=h6*T_g
Q[9]=Q8
Q[10]=h7*T_g
Q[11]=Q9
print(Q)
print("\n\n")

import sys

n = 12

a = np.zeros((n,n+1))

x = np.zeros(n)

print('Enter Augmented Matrix Coefficients:')
for i in range(n):
    for j in range(n):
        a[i][j] = K[i][j]
        a[i][12]=Q[i]

for i in range(n):
    if a[i][i] == 0.0:
        sys.exit('Divide by zero detected!')

    for j in range(i+1, n):
        ratio = a[j][i]/a[i][i]

        for k in range(n+1):
            a[j][k] = a[j][k] - ratio * a[i][k]

# Back Substitution
x[n-1] = a[n-1][n]/a[n-1][n-1]

for i in range(n-2,-1,-1):
    x[i] = a[i][n]

    for j in range(i+1,n):
        x[i] = x[i] - a[i][j]*x[j]

    x[i] = x[i]/a[i][i]

# Displaying solution
print('\nRequired solution is: ')
for i in range(n):
    print('T%d = %0.2f' %(i+1,x[i]))

K_inv=np.linalg.inv(K)
T=np.dot(K_inv,Q)
print(T)